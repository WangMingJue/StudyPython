下面我们详细来讲解不同的数据类型

数字(Number)类型
数字类型用于存储数值。
首先我们要特别注意的一点是，数字类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。
这句话是什么意思呢？
关键点是：数字类型是不可变类型。
那么我们来讲一讲不可变类型：
我们之前有讲过，创建一个变量，那么就相当于在计算机内存里，划分出来一个内存区域，这个内存区域里的值，就是我们要创建的值。这个内存区域有一个编号，叫做内存ID。
用通俗的话来讲，我们计算机的内存就像是一个大仓库一样，由一个一个货架和小箱子组成的。在我们创建一个变量的时候，就你是在一个货架中选择了一个或几个连续的小箱子，
小箱子里的东西，就是我们创建的东西。然后我们后面怎么使用这个变量呢？怎么知道这个变量里面是什么值呢？我们实际上创建了一个变量后，这个变量实际上指定的是这个货架的编号加上这几个小箱子的编号。
我们在使用这个变量的时候，就通过货架编号加箱子编号，去找到那几个小箱子，查看箱子里面的值，然后进行使用。
我们讲回不可变类型，不可变类型指的是，当我们创建了一个不可变类型的时候，这几个小箱子存储了这些值后，不能再改变成别的值，想要再创建另一个值，就要再找另外的小箱子来存储。

我们以实例来讲一下：
a = 1
id(a)
a = 2
id(a)

上面的例子，我们先创建了一个变量a，它指定的箱子里，值为1。 使用id函数来查看货架编号和箱子编号，得到一组编号。
我们又把a变量创建了一个值，指定的箱子里，值为2。 再使用id函数去查看来查看货架编号和箱子编号，得到的编号跟上面的就不一样了。
这就是不可变类型的本质。那么相应的可变类型，就是你不断的去改变箱子里的值，箱子的编号是不变的。

我们现在来讲一下，三种不同的数字类型。
整型(Int) - 通常被称为是整数类型或整数，是正或负整数，不带小数点。（Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型）
浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。

整型例如：10  1111 -1 -780
浮点型例如： 1.2  -5.1  32.3e+18
复数例如：3.14j（只做了解，知道有这个类型就行）


数字类型转换
有时候，我们会得到一个浮点数，但是我们又不想要小数点，需要转换成整型，那么就要用到数据类型转换了。
只要使用简单的Python内置函数，我们就可以完成这个操作。
int(x) 将x转换为一个整数。
float(x) 将x转换到一个浮点数。

例如:
a = 2.0
b = 3
int(a)得到的结果是2
float(b)得到的结果是3.0

c = 2.1
d = 2.7
int(c)得到的结果是2
int(d)得到的结果是2
int会把float中的小数部分直接省略。


数字运算
这个之前在运算符章节我们讲过，简单的+-*/，和复杂一点的** // %
我们可以将一个复杂的计算结果赋值给一个变量。
a = 10 * 20
b = a / 3
c = (a + b) * 10


数学函数
我们现在将的函数，都是Python已经写好的，安装Python就可以使用的函数，我们叫它内置函数，后面我们会讲到函数的定义。

abs(x)	返回数字的绝对值，如abs(-10) 返回 10
max(x1, x2,...)	返回给定参数的最大值，参数可以为序列。
sqrt(x)	返回数字x的平方根。



字符串（String）类型
字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 " )来创建字符串。当然之前也说过三引号（''' 或 """）也可以创建，不过一般不使用。
创建字符串很简单，只要为变量分配一个值即可。例如：
a1 = 'Hello World!'
a2 = "Test"

访问字符串中的值
Python访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式为： 变量[头下标:尾下标]

索引值以 0 为开始值，-1 为从末尾的开始位置。
https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg
https://www.runoob.com/wp-content/uploads/2014/05/python-str-runoob.png

从上面的例子我们可以看出，如果[n]中只有一个数字，那就是要获取第n位的单个字符。
如果[n:m]中有两个数字加一个：号，那么就是要从第n位开始找，找到第m位之前的一小串字符串。
我们甚至还有[n:m:s]的格式，s代表的是步长，默认为1，就是每次第一个字符，如果s是2,那么就是每次数第二个字符。
例子如下：
a = "ABCDEFG"
print("a[1:5:2]: ", a[1:5:2])
以上实例执行结果：
a[1:5:2]: BD
先按照a[1:5]来获取结果，会是BCDE,B是第一个，然后往后数第二个是D，C被跳过了，D后面第二个没有了，E是后面第一个也不要，所以a[1:5:2]的结果就是BD


字符串更新
更新很简单，就是使用+号来进行字符串连接
var1 = 'Hello World!'
print ("已更新字符串 : ", var1[:6] + 'Runoob!')
以上实例执行结果
已更新字符串 :  Hello Runoob!
这只是简单的去添加字符串，还有函数可以去替换字符，这些我们后面再介绍


转义字符
在需要在字符中使用特殊字符时（例如你想在字符串），python 用反斜杠 \ 转义字符。
https://www.runoob.com/python3/python3-string.html（转义表格）
我们可以运行几个看看效果


字符串运算符
下表实例变量 a 值为字符串 "Hello"，b 变量值为 "Python"：

操作符		描述																实例
+			字符串连接															a + b 输出结果： HelloPython
*			重复输出字符串														a*2 输出结果：HelloHello
[]			通过索引获取字符串中字符												a[1] 输出结果 e
[ : ]		截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。	a[1:4] 输出结果 ell
in			成员运算符 - 如果字符串中包含给定的字符返回 True						'H' in a 输出结果 True
not in		成员运算符 - 如果字符串中不包含给定的字符返回 True						'M' not in a 输出结果 True
r/R			原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，		print( r'\n' )     print( R'\n' )
			没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 
			r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。	
%			格式字符串															请看下一节内容。



a = "Hello"
b = "Python"
 
print("a + b 输出结果：", a + b)
print("a * 2 输出结果：", a * 2)
print("a[1] 输出结果：", a[1])
print("a[1:4] 输出结果：", a[1:4])
 
if( "H" in a) :
    print("H 在变量 a 中")
else :
    print("H 不在变量 a 中")
 
if( "M" not in a) :
    print("M 不在变量 a 中")
else :
    print("M 在变量 a 中")
 
print (r'\n')
print (R'\n')
以上实例输出结果为：

a + b 输出结果： HelloPython
a * 2 输出结果： HelloHello
a[1] 输出结果： e
a[1:4] 输出结果： ell
H 在变量 a 中
M 不在变量 a 中
\n
\n



字符串格式化
Python 支持格式化字符串的输出（通俗点说，就是按照自定义的格式输出）。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。

print ("我叫 %s 今年 %d 岁!" % ('小明', 10))
以上实例输出结果：
我叫 小明 今年 10 岁!

符号	描述
%c	 	格式化字符及其ASCII码
%s	 	格式化字符串
%d	 	格式化整数
%u	 	格式化无符号整型
%o	 	格式化无符号八进制数
%x	 	格式化无符号十六进制数
%X	 	格式化无符号十六进制数（大写）
%f	 	格式化浮点数字，可指定小数点后的精度
%e	 	用科学计数法格式化浮点数
%E	 	作用同%e，用科学计数法格式化浮点数
%g	 	%f和%e的简写
%G	 	%f 和 %E 的简写
%p	 	用十六进制数格式化变量的地址

格式化操作符辅助指令:

符号	功能
*		定义宽度或者小数点精度
-		用做左对齐
+		在正数前面显示加号( + )
<sp>	在正数前面显示空格
#		在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
0		显示的数字前面填充'0'而不是默认的空格
%		'%%'输出一个单一的'%'
(var)	映射变量(字典参数)
m.n.	m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)

format 格式化函数
上面的方法可能有点麻烦，Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
基本语法是通过 {} 和 : 来代替以前的 % 。

format 函数可以接受不限个参数，位置可以不按顺序。

实例
>>>"{} {}".format("hello", "world")    # 不设置指定位置，按默认顺序
'hello world'
 
>>> "{0} {1}".format("hello", "world")  # 设置指定位置
'hello world'
 
>>> "{1} {0} {1}".format("hello", "world")  # 设置指定位置
'world hello world'
也可以设置参数：

实例
print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))
# 通过字典设置参数
site = {"name": "菜鸟教程", "url": "www.runoob.com"}
print("网站名：{name}, 地址 {url}".format(**site))
# 通过列表索引设置参数
my_list = ['菜鸟教程', 'www.runoob.com']
print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的

输出结果为：
网站名：菜鸟教程, 地址 www.runoob.com
网站名：菜鸟教程, 地址 www.runoob.com
网站名：菜鸟教程, 地址 www.runoob.com

也可以向 str.format() 传入对象：
实例
class AssignValue(object):
    def __init__(self, value):
        self.value = value
my_value = AssignValue(6)
print('value 为: {0.value}'.format(my_value))  # "0" 是可选的

输出结果为：
value 为: 6
数字格式化

下表展示了 str.format() 格式化数字的多种方法：
>>> print("{:.2f}".format(3.1415926))
3.14

数字			格式					输出			描述
3.1415926		{:.2f}					3.14			保留小数点后两位
3.1415926		{:+.2f}					+3.14			带符号保留小数点后两位
-1				{:+.2f}					-1.00			带符号保留小数点后两位
2.71828			{:.0f}					3				不带小数
5				{:0>2d}					05				数字补零 (填充左边, 宽度为2)
5				{:x<4d}					5xxx			数字补x (填充右边, 宽度为4)
10				{:x<4d}					10xx			数字补x (填充右边, 宽度为4)
1000000			{:,}					1,000,000		以逗号分隔的数字格式
0.25			{:.2%}					25.00%			百分比格式
1000000000		{:.2e}					1.00e+09		指数记法
13				{:>10d}	    			      13		右对齐 (默认, 宽度为10)
13				{:<10d}					13				左对齐 (宽度为10)
13				{:^10d}	     			   13			中间对齐 (宽度为10)

11				'{:b}'.format(11)		1011
				'{:d}'.format(11)		11
				'{:o}'.format(11)		13
				'{:x}'.format(11)		b
				'{:#x}'.format(11)		0xb
				'{:#X}'.format(11)		0XB	进制





^, <, > 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
+ 表示在正数前显示 +，负数前显示 -；  （空格）表示在正数前加空格
b、d、o、x 分别是二进制、十进制、八进制、十六进制。
此外我们可以使用大括号 {} 来转义大括号，如下实例：

实例
print ("{} 对应的位置是 {{0}}".format("runoob"))
输出结果为：
runoob 对应的位置是 {0}


三引号
python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下

实例
para_str = """这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
"""
print (para_str)
以上实例执行结果为：

这是一个多行字符串的实例
多行字符串可以使用制表符
TAB (    )。
也可以使用换行符 [ 
 ]。


f-string
f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。

之前我们习惯用百分号 (%):
实例
>>> name = 'Runoob'
>>> 'Hello %s' % name
'Hello Runoob'

f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下：
实例
>>> name = 'Runoob'
>>> f'Hello {name}'  # 替换变量
'Hello Runoob'
>>> f'{1+2}'         # 使用表达式
'3'

>>> w = {'name': 'Runoob', 'url': 'www.runoob.com'}
>>> f'{w["name"]}: {w["url"]}'
'Runoob: www.runoob.com'
用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。

在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果
实例
>>> x = 1
>>> print(f'{x+1}')   # Python 3.6
2

>>> x = 1
>>> print(f'{x+1=}')   # Python 3.8
'x+1=2'


字符串内建函数
内建函数是指你安装了Python后，就自带的官方函数，我们先不管函数是怎么定义的，我们先来说如何简单的使用。
序号	方法及描述
capitalize()
将字符串的第一个字符转换为大写

center(width, fillchar)
返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。

count(str, beg= 0,end=len(string))
返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
	
endswith(suffix, beg=0, end=len(string))
检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.

expandtabs(tabsize=8)
把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。

find(str, beg=0, end=len(string))
检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1

index(str, beg=0, end=len(string))
跟find()方法一样，只不过如果str不在字符串中会报一个异常。

isalnum()
如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False

isalpha()
如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False

isdigit()
如果字符串只包含数字则返回 True 否则返回 False..

islower()
如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False

isnumeric()
如果字符串中只包含数字字符，则返回 True，否则返回 False

isspace()
如果字符串中只包含空白，则返回 True，否则返回 False.

istitle()
如果字符串是标题化的(见 title())则返回 True，否则返回 False

isupper()
如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False

join(seq)
以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串

len(string)
返回字符串长度

ljust(width[, fillchar])
返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。

lower()
转换字符串中所有大写字符为小写.

lstrip()
截掉字符串左边的空格或指定字符。
	
max(str)
返回字符串 str 中最大的字母。
	
min(str)
返回字符串 str 中最小的字母。

replace(old, new [, max])
把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。

rfind(str, beg=0,end=len(string))
类似于 find()函数，不过是从右边开始查找.

rindex( str, beg=0, end=len(string))
类似于 index()，不过是从右边开始.

rjust(width,[, fillchar])
返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串

rstrip()
删除字符串字符串末尾的空格.

split(str="", num=string.count(str))
以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串

splitlines([keepends])
按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。

startswith(substr, beg=0,end=len(string))
检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。

strip([chars])
在字符串上执行 lstrip()和 rstrip()

swapcase()
将字符串中大写转换为小写，小写转换为大写

title()
返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())

upper()
转换字符串中的小写字母为大写

zfill (width)
返回长度为 width 的字符串，原字符串右对齐，前面填充0

isdecimal()
检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。



































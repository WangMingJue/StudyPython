变量
变量是一个很重要很基础的概念，我们在编程的过程中会经常使用到。
变量的概念基本上和初中数学方程式中的变量是一致的，都是可变的。
只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。

变量在程序中就是用一个变量名表示，变量名有它自己的命名规则，不是随便命名的，必须是大小写英文、数字和_（注意这是下划线符号）的组合，且不能用数字开头。
以下是正确的变量命名：
a_1, a1, Alex_, _a, a11111
以下是错误的变量命名：
1a, 111, a_#, @#$a1
当然，我们更推荐在命名变量的时候，使用更有意义的命名，更符合你使用场景的命名。
比如你这个变量是用来代表汽车的，你就可以命名为car或car_1
比如你这个变量是用来代表背包的，你就可以命名为bag或bag_2
在Python中，变量实际代表的值可以是任何数据类型，可以是先是数字类型的，再变成字符串类型的。关于数据类型我们接下来再讲。

数据类型
计算机可以处理非常多的东西，不止是数学运算，也可以处理视频、文本、图形等数据，在处理不同类型的数据时，要使用不同的数据类型。
就像JPG格式代表图片，AVI代表视频一样。

整数类型
Python可以处理任何大小的整数，当然也包括了负整数，如1,0,-1,1000等。（我们只讨论十进制的数字，关于二进制，八进制，十六进制，可以私下了解）
对于位数很长的数，例如10000000000，很难数清楚0的个数。Python允许在数字中间以_（下划线）分隔，因此，写成10_000_000_000和10000000000是完全一样的。

浮点数类型
浮点数就是我们常说的小数。比如1.23，-2.1等。
对于很大或很小的浮点数，在数学上就要用科学计数法来表示，在Python中，我们把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5。

字符串类型
字符串是以单引号'或双引号"括起来的文本，比如'abc'，"xyz"等等。
请注意，''或""本身只是一种表示方式，让你能知道这是一个字符串，但不是字符串的一部分。
因此，字符串'abc'只有a，b，c这3个字符。如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。
（考虑转义讲不讲）
还有一个更特殊的是三引号'''或"""，三引号和单/双引号的区别是在于，单/双引号只能单行显示，比如"I'm OK"就是一行就显示完了。
三引号可以多行显示
例如：
'''line1
line2
line3'''
为啥会有三引号呢，是为了方便在文本过长的时候，一个屏幕写不下，就可以用三引号来换行显示。

布尔值类型
布尔值是用来代表真假，在Python中，用True来代表真，用False来代表假，注意大小写，如果是小写的true或false就不对了。
真假主要用来判断给出的条件是真是假，比如3>2，在Python中，你输入这个条件，你获取到的结果是True，因为这个条件是真的。
如果你输入的条件是2>3，那么你就会得到False，因为这个条件很明显是假的。

空值类型
空值是Python里一个特殊的类型，用None表示。None不能理解为0，因为0是有意义的，是一个数字类型，而None是一个特殊的空值，代表是空。

关于其他的类型，比如列表，字典等，我们后面会讲到，先了解这些简单的类型。

介绍完了变量和数据类型，我们把它们结合到一起来看一下。
比如： a=10， b="ABC", c=True
我们分别创建了三个变量a,b,c，a变量代表了数字10，b变量代表了字符串"ABC"，c代表了变量False。
现在的话，我们可以在程序的其他地方使用这三个变量，使用的时候，a变量就代表了10。
例如：
a=1
b=2
c=a+b
我们创建了a变量代表数字1，b变量代表了数字2，c变量等a变量加b变量。
从程序上我们看到，想知道c变量代表a变量加b变量的结果，那么我们就知道c应该等于数字1加上数字2，也就是等于3。
这就是变量的最简单的应用。



注释
就像是在读书的时候，我们在不懂的地方，会写一些自己的理解，方便我们再次去复习阅读的时候，能一下子去理解。
在Python中，注释就是这样的作用。
我们用两种方法来进行注释。
第一种，#符号，例如：
# 这是一个注释
a = 1
b = 2 # 创建了一个变量b，值为2。
我们可以看到，我们以#符号开头，写一条注释，然后创建了a和b两个变量，并在变量b后面又写了一条注释。
在Python程序执行的时候，在遇到#符号开头的文本时，会直接跳过#符号后面的文本。
我们就可以以这种形式，来不断的注释一下我们的代码。比如我们写了一个很复杂程序，我们可以写一个好的注释，以便别人在看我们代码的时候，能理解我们是怎么去写的这段代码。

我们可以看到，#符号的注释只能进行单行注释。我们也可以进行多行注释
第二种，三引号。
上面我们讲过三引号，它是字符串的一种表达形式，在这里，我们也可以用来进行多行注释。例如：
"""这是一个注释
这是注释的第二行
这是注释的第三行"""

单行注释，我们主要是用来标记某一个语句的意思，为什么这样写。
多行注释，我们主要用来在程序文件的开头进行说明，说明我们这个程序文件都有什么功能，如何使用。


缩进
python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {}，其他的语言如Java是这样的。
缩进有两种，一种是空格，一种是Tab（键盘上，大小写切换键上面的那个键）。
同一个文件中的程序必须要使用同一种缩进，这里我们在Pycharm软件中去使用的时候，只使用Tab，因为空格很难去控制个数。



运算符
从一个数学算式来举例：
4 + 5 = 9
4和5是加数和被加数，也可以叫操作数，+号就是我们说的运算符，若干个操作数通过不同的运算符，可以得到不同的结果。
接下来，我们只讲一些常用的运算符。

算术运算符
我们先假设变量a = 10,变量b = 21
先看下面的算术运算符的表格
运算符		描述											实例
+			加 - 两个对象相加								a + b 输出结果 31
-			减 - 得到负数或是一个数减去另一个数				a - b 输出结果 -11
*			乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 210
/			除 - x 除以 y									b / a 输出结果 2.1
**			幂 - 返回x的y次幂								a**b 为10的21次方
%			取模 - 返回除法的余数							b % a 输出结果 1
//			取整除 - 向下取接近商的整数						>>> 9//2	4		>>> -9//2		-5

加法+，减法-，相信这两个大家一眼就能看出来，我就不讲了。
在Python中，乘法的运算符是*，除法的运算符是/(要注意一点的是，我们在讲的一直是Python3的版本，所以哪怕我们使用2/1，得到的也是浮点数2.0，而不是整数2，在Python2中得到的是整数，了解一下就好)
两个**代表幂运算，就是次方运算，2**1就是2的1次方，也就是2。2**2就是2的2次方，也就是4。
接下来我们讲一下比较麻烦的两个算术运算符，取整除和取模。
我们先说一个数学算式：
9 / 4 = 2 ... 1
这个数学算式我们可以这样去说，9除以4，商是2，余数为1。
那么取模运算呢，就是取这个余数，余数是几，结果就是几，那么9%4=1
取整除去处呢，就是取这个商，商是几，结果就是几，那么9//4=2

a = 21
b = 10
c = 0
 
c = a + b
print ("1 - c 的值为：", c)
 
c = a - b
print ("2 - c 的值为：", c)
 
c = a * b
print ("3 - c 的值为：", c)
 
c = a / b
print ("4 - c 的值为：", c)
 
c = a % b
print ("5 - c 的值为：", c)
 
# 修改变量 a 、b 、c
a = 2
b = 3
c = a**b 
print ("6 - c 的值为：", c)
 
a = 10
b = 5
c = a//b 
print ("7 - c 的值为：", c)


比较运算符
以下假设变量a为10，变量b为20：

运算符		描述									实例
==			等于 - 比较对象是否相等					(a == b) 返回 False。
!=			不等于 - 比较两个对象是否不相等			(a != b) 返回 True。
>			大于 - 返回x是否大于y					(a > b) 返回 False。
<			小于 - 返回x是否小于y。					(a < b) 返回 True。
>=			大于等于 - 返回x是否大于等于y。			(a >= b) 返回 False。
<=			小于等于 - 返回x是否小于等于y。			(a <= b) 返回 True。

首先我们要知道的是，比较以后的结果是什么。
我们以数学课，都学会真命题和假命题。
在比较运算符中，所有的比较都是一个命题，如果是真命题，返回的结果是True，如果是假命题，返回的就是False。

a = 21
b = 10
c = 0
 
if ( a == b ):
   print ("1 - a 等于 b")
else:
   print ("1 - a 不等于 b")
 
if ( a != b ):
   print ("2 - a 不等于 b")
else:
   print ("2 - a 等于 b")
 
if ( a < b ):
   print ("3 - a 小于 b")
else:
   print ("3 - a 大于等于 b")
 
if ( a > b ):
   print ("4 - a 大于 b")
else:
   print ("4 - a 小于等于 b")
 
# 修改变量 a 和 b 的值
a = 5
b = 20
if ( a <= b ):
   print ("5 - a 小于等于 b")
else:
   print ("5 - a 大于  b")
 
if ( b >= a ):
   print ("6 - b 大于等于 a")
else:
   print ("6 - b 小于 a")
   
   
赋值运算符
运算符	描述				实例
=		简单的赋值运算符		c = a + b 将 a + b 的运算结果赋值为 c
+=		加法赋值运算符		c += a 等效于 c = c + a
-=		减法赋值运算符		c -= a 等效于 c = c - a
*=		乘法赋值运算符		c *= a 等效于 c = c * a
/=		除法赋值运算符		c /= a 等效于 c = c / a
%=		取模赋值运算符		c %= a 等效于 c = c % a
**=		幂赋值运算符			c **= a 等效于 c = c ** a
//=		取整除赋值运算符		c //= a 等效于 c = c // a

首先我们先讲一下什么叫赋值。
之前我们创建一个新变量的时候，比如a=1，这就是赋值。
用通俗的语言来讲，就是你把=号后面的部分，指定给了=号前面的部分。
就像a=1一样，我们把1这个值给了a，那么现在a就代表了1。不管谁使用了a，那么就是使用了1这个值。
那么c = a+b呢，也是同样的道理。把a+b运算后得到的值，赋值给了a。

上面表格中，除了第一个以外，其他的都是同一个类型的，我们只讲+=，下面的你都会懂了。
+=实际上是一个简写，比如在a+=1中，实际上是a = a + 1 的简写。
我们可以这样去看a = a + 1如何变成a += 1的。
a = a + 1中，我们把a+提到前面，变成了a a +=1，然后合并一下两个a，就变成了a+=1。
a+=1实际上就是在a之前已经赋值的基础上，再加上1，如果以前a是2，再加1就是3了。
以后再遇到a+=1就简单了，把a+直接放到=号后面，在前面再加个a就行了。a=a+1。

a = 21
b = 10
c = 0
 
c = a + b
print ("1 - c 的值为：", c)
 
c += a
print ("2 - c 的值为：", c)
 
c *= a
print ("3 - c 的值为：", c)
 
c /= a 
print ("4 - c 的值为：", c)
 
c = 2
c %= a
print ("5 - c 的值为：", c)
 
c **= a
print ("6 - c 的值为：", c)
 
c //= a
print ("7 - c 的值为：", c)



位运算符
这个我们平时是用不到的，不讲了

逻辑运算符
以下假设变量 a 为 10, b为 20:

运算符		逻辑表达式			描述																		实例
and			x and y				布尔"与" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。			(a and b) 返回 20。
or			x or y				布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。				(a or b) 返回 10。
not			not x				布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。			not(a and b) 返回 False

高中数学中有提到过与或非运算。
这里简单说一下口诀：
在与运算中，两真为真，其余为假。
在或运算中，一真为真，两假为假。
在非运算中，非真为假，非假为真。

a = 10
b = 20
 
if ( a and b ):
   print ("1 - 变量 a 和 b 都为 true")
else:
   print ("1 - 变量 a 和 b 有一个不为 true")
 
if ( a or b ):
   print ("2 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
   print ("2 - 变量 a 和 b 都不为 true")
 
# 修改变量 a 的值
a = 0
if ( a and b ):
   print ("3 - 变量 a 和 b 都为 true")
else:
   print ("3 - 变量 a 和 b 有一个不为 true")
 
if ( a or b ):
   print ("4 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
   print ("4 - 变量 a 和 b 都不为 true")
 
if not( a and b ):
   print ("5 - 变量 a 和 b 都为 false，或其中一个变量为 false")
else:
   print ("5 - 变量 a 和 b 都为 true")
   
   
成员运算符
运算符		描述														实例
in			如果在指定的序列中找到值返回 True，否则返回 False。				x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in		如果在指定的序列中没有找到值返回 True，否则返回 False。			x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。

a = 10
b = 20
list = [1, 2, 3, 4, 5 ]
 
if ( a in list ):
   print ("1 - 变量 a 在给定的列表中 list 中")
else:
   print ("1 - 变量 a 不在给定的列表中 list 中")
 
if ( b not in list ):
   print ("2 - 变量 b 不在给定的列表中 list 中")
else:
   print ("2 - 变量 b 在给定的列表中 list 中")
 
# 修改变量 a 的值
a = 2
if ( a in list ):
   print ("3 - 变量 a 在给定的列表中 list 中")
else:
   print ("3 - 变量 a 不在给定的列表中 list 中")
   

身份运算符
用于比较两个对象的存储单元

运算符		描述											实例
is			is 是判断两个标识符是不是引用自一个对象			x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
is not		is not 是判断两个标识符是不是引用自不同对象		x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。
注： id() 函数用于获取对象内存地址。这里讲一下，我们所有的数据都存在电脑的内存里，内存是通过一个ID来唯一区别的。

a = 20
b = 20
 
if ( a is b ):
   print ("1 - a 和 b 有相同的标识")
else:
   print ("1 - a 和 b 没有相同的标识")
 
if ( id(a) == id(b) ):
   print ("2 - a 和 b 有相同的标识")
else:
   print ("2 - a 和 b 没有相同的标识")
 
# 修改变量 b 的值
b = 30
if ( a is b ):
   print ("3 - a 和 b 有相同的标识")
else:
   print ("3 - a 和 b 没有相同的标识")
 
if ( a is not b ):
   print ("4 - a 和 b 没有相同的标识")
else:
   print ("4 - a 和 b 有相同的标识")
   
is 与 == 区别：
is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。
   
   
   
   
   
   
   
   
   

































